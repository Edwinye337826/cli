#!/usr/bin/env node

const program = require('commander');
const httpServer = require("http-server");
const portfinder = require('portfinder');
const colors = require('colors');
const os = require('os');

program
  .usage('[options]')
  .option('-p, --port <n>', 'Port to use (defaults to 8080)', parseInt)
  .option('-a, --address <n>', 'Address to use (defaults to 0.0.0.0)')
  .option('-P, --proxy <n>', 'Proxies all requests which cant be resolved locally to the given url')
  .parse(process.argv);


let ifaces = os.networkInterfaces();

let port = program.port || parseInt(process.env.PORT, 10),
    host = program.address || '0.0.0.0',
    proxy = program.proxy,
    root = process.cwd(),
    logger;

logger = {
  info: console.log,
  request: function (req, res, error) {
    var date = new Date().toUTCString();
    if (error) {
      logger.info(
        '[%s] "%s %s" Error (%s): "%s"',
        date, req.method.red, req.url.red,
        error.status.toString().red, error.message.red
      );
    }
    else {
      logger.info(
        '[%s] "%s %s" "%s"',
        date, req.method.cyan, req.url.cyan,
        req.headers['user-agent']
      );
    }
  }
};

if (!port) {
  portfinder.basePort = 8080;
  portfinder.getPort(function (err, port) {
    if (err) { throw err; }
    listen(port);
  });
}
else {
  listen(port);
}

function listen(port) {
  var options = {
    root: root,
    logFn: logger.request,
    proxy: proxy
  };

  var server = httpServer.createServer(options);
  server.listen(port, host, function () {
    var canonicalHost = host === '0.0.0.0' ? '127.0.0.1' : host,
        protocol = 'http://';

    logger.info(['Starting up http-server, serving '.yellow,
      server.root.cyan,
      '\nAvailable on:'.yellow
    ].join(''));

    if (program.address && host !== '0.0.0.0') {
      logger.info(('  ' + protocol + canonicalHost + ':' + port.toString()).green);
    } else {
      Object.keys(ifaces).forEach(function (dev) {
        ifaces[dev].forEach(function (details) {
          if (details.family === 'IPv4') {
            logger.info(('  ' + protocol + details.address + ':' + port.toString()).green);
          }
        });
      });
    }

    if (typeof proxy === 'string') {
      logger.info('Unhandled requests will be served from: ' + proxy);
    }

    logger.info('Hit CTRL-C to stop the server');
  });
}

if (process.platform === 'win32') {
  require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  }).on('SIGINT', function () {
    process.emit('SIGINT');
  });
}

process.on('SIGINT', function () {
  logger.info('http-server stopped.'.red);
  process.exit();
});

process.on('SIGTERM', function () {
  logger.info('http-server stopped.'.red);
  process.exit();
});
