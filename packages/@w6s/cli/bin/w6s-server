#!/usr/bin/env node

const program = require('commander');
const httpServer = require("http-server");
const portfinder = require('portfinder');
const os = require('os');

program
  .usage('[options]')
  .option('-p, --port <n>', 'Port to use (defaults to 8080)', parseInt)
  .option('-a, --address <n>', 'Address to use (defaults to 0.0.0.0)')
  .option('-P, --proxy <n>', 'Proxies all requests which cant be resolved locally to the given url')
  .parse(process.argv);


const ifaces = os.networkInterfaces();

const port = program.port || parseInt(process.env.PORT, 10);
const host = program.address || '0.0.0.0';
const {proxy} = program;
const root = process.cwd();

const logger = {
  info: console.log,
  request(req, res, error) {
    const date = new Date().toUTCString();
    if (error) {
      logger.info(
        '[%s] "%s %s" Error (%s): "%s"',
        date, req.method.red, req.url.red,
        error.status.toString().red, error.message.red
      );
    } else {
      logger.info(
        '[%s] "%s %s" "%s"',
        date, req.method.cyan, req.url.cyan,
        req.headers['user-agent']
      );
    }
  }
};

function listen(port) {
  const options = {
    root,
    logFn: logger.request,
    proxy
  };

  const server = httpServer.createServer(options);
  server.listen(port, host, () => {
    const canonicalHost = host === '0.0.0.0' ? '127.0.0.1' : host;
    const protocol = 'http://';

    logger.info(['Starting up http-server, serving '.yellow,
      server.root.cyan,
      '\nAvailable on:'.yellow
    ].join(''));

    if (program.address && host !== '0.0.0.0') {
      logger.info((`  ${  protocol  }${canonicalHost  }:${  port.toString()}`).green);
    } else {
      Object.keys(ifaces).forEach((dev) => {
        ifaces[dev].forEach((details) => {
          if (details.family === 'IPv4') {
            logger.info((`  ${  protocol  }${details.address  }:${  port.toString()}`).green);
          }
        });
      });
    }

    if (typeof proxy === 'string') {
      logger.info(`Unhandled requests will be served from: ${  proxy}`);
    }

    logger.info('Hit CTRL-C to stop the server');
  });
}

if (!port) {
  portfinder.basePort = 8080;
  portfinder.getPort((err, port) => {
    if (err) { throw err; }
    listen(port);
  });
}
else {
  listen(port);
}

if (process.platform === 'win32') {
  /* eslint  global-require:0 */
  require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  }).on('SIGINT', () => {
    process.emit('SIGINT');
  });
}

process.on('SIGINT', () => {
  logger.info('http-server stopped.'.red);
  process.exit();
});

process.on('SIGTERM', () => {
  logger.info('http-server stopped.'.red);
  process.exit();
});
